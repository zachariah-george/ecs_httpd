---
- name: Build apache httpd archive integrated with mod_security and owasp coreruleset
  hosts: localhost
  gather_facts: false
    vars_files: vars.yml
  # vars:
  #     crs_download_dest: "./tmp/coreruleset.zip"
  #     crs_download_url: "https://github.com/coreruleset/coreruleset/archive/refs/tags/v{{ crs_version }}.zip"
  #     crs_extract_dest: "./tmp/coreruleset"
  #     crs_rules_dir: "{{ crs_extract_dest }}/coreruleset-{{ crs_version }}/rules/"
  #     crs_setup_conf_dest: "{{ httpd_conf_dir }}/extra/crs-setup.conf"
  #     crs_setup_conf_example: "{{ crs_extract_dest }}/coreruleset-{{ crs_version }}/crs-setup.conf.example"
  #     crs_version: "3.3.4"
  #     httpd_certs_dir: "{{ httpd_conf_dir }}/certs"
  #     httpd_conf_dir: "{{ httpd_directory }}/conf"
  #     httpd_download_dest: "./tmp/httpd.zip"
  #     httpd_download_url: "https://www.apachelounge.com/download/{{ visual_studio_version }}/binaries/httpd-{{ httpd_version }}-win64-{{ visual_studio_version }}.zip"
  #     httpd_extract_dest: "./tmp/httpd"
  #     httpd_rules_dest: "{{ httpd_conf_dir }}/extra/rules/"
  #     httpd_sites_enabled_dir: "{{ httpd_conf_dir }}/sites-enabled"
  #     httpd_version: "2.4.57"
  #     mod_security_download_dest: "./tmp/mod_security.zip"
  #     mod_security_download_url: "https://www.apachelounge.com/download/{{ visual_studio_version }}/modules/mod_security-{{ mod_security_version }}-win64-{{ visual_studio_version }}.zip"
  #     mod_security_extract_dest: "./tmp/mod_security"
  #     mod_security_version: "2.9.7"
  #     unicode_mapping_dest: "{{ httpd_extract_dest }}/Apache24/conf/extra/unicode.mapping"
  #     unicode_mapping_url: "https://github.com/SpiderLabs/ModSecurity/raw/v3/master/unicode.mapping"
  #     visual_studio_version: "VS17"

  tasks:
    - name: Install required packages
      become: true
      apt:
        name:
          - curl
          - unzip
          - zip
          - openssl
        state: present

    - name: Create destination directories if not exist
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ httpd_download_dest | dirname }}"
        # - "{{ mod_security_download_dest | dirname }}"
        # - "{{ crs_download_dest | dirname }}"
        - "{{ httpd_extract_dest }}"
        - "{{ mod_security_extract_dest }}"
        - "{{ crs_extract_dest }}"

    - name: Download Apache HTTP Server
      shell: "curl -LJo {{ httpd_download_dest }} {{ httpd_download_url }}"

    - name: Extract Apache HTTP Server
      command: "unzip -o {{ httpd_download_dest }} -d {{ httpd_extract_dest }}"

    - name: Download mod_security module
      shell: "curl -LJo {{ mod_security_download_dest }} {{ mod_security_download_url }}"

    - name: Extract mod_security module
      command: "unzip -o {{ mod_security_download_dest }} -d {{ mod_security_extract_dest }}"

    - name: Download mod_log_rotate module
      shell: "curl -LJo {{ mod_log_rotate_download_dest }} {{ mod_log_rotate_download_url }}"

    - name: Extract mod_log_rotate module
      command: "unzip -o {{ mod_log_rotate_download_dest }} -d {{ mod_log_rotate_extract_dest }}"

    - name: Download coreruleset archive
      shell: "curl -LJo {{ crs_download_dest }} {{ crs_download_url }}"

    - name: Extract coreruleset archive
      command: "unzip -o {{ crs_download_dest }} -d {{ crs_extract_dest }}"

    - name: Find ApacheXX path
      find:
        paths: ./tmp/
        patterns: ABOUT_APACHE.txt
        file_type: file
        recurse: yes
      register: found_files

    - name: Find Apache directory
      find:
        paths: ./tmp/httpd/
        patterns: "Apache*"
        file_type: directory
      register: apache_directory

    - name: Display Apache directory path
      debug:
        var: apache_directory.files[0].path
    - name: Set the target directory
      set_fact:
        httpd_directory: "{{ found_files.files[0].path | dirname }}"
      when: found_files.files | length > 0

    - name: Copy mod_security2.so to Apache modules directory
      command: "cp {{ mod_security_extract_dest }}/mod_security-{{ mod_security_version }}/mod_security2.so {{ httpd_directory }}/modules/"

    - name: Copy yajl.dll to Apache bin directory
      command: "cp {{ mod_security_extract_dest }}/mod_security-{{ mod_security_version }}/yajl.dll {{ httpd_directory }}/bin/"

    - name: Copy mod_log_rotate.so to Apache modules directory
      command: "cp {{ mod_log_rotate_extract_dest }}/mod_log_rotate-{{ mod_log_rotate_version }}/mod_log_rotate.so {{ httpd_directory }}/modules/"

    - name: Download unicode.mapping file
      shell: "curl -o {{ unicode_mapping_dest }} {{ unicode_mapping_url }}"

    - name: Copy crs-setup.conf.example to crs-setup.conf
      copy:
        src: "{{ crs_setup_conf_example }}"
        dest: "{{ crs_setup_conf_dest }}"

    - name: Copy coreruleset rules
      copy:
        src: "{{ crs_rules_dir }}"
        dest: "{{ httpd_rules_dest }}"

    - name: Create certs directory
      file:
        path: "{{ httpd_certs_dir }}"
        state: directory

    - name: Create sites-enabled directory
      file:
        path: "{{ httpd_sites_enabled_dir }}"
        state: directory

    - name: Copy modsecurity.conf-recommended to modsecurity.conf
      copy:
        src: "{{ mod_security_extract_dest }}/mod_security-{{ mod_security_version }}/mod_security/modsecurity.conf-recommended"
        dest: "{{ httpd_conf_dir }}/extra/modsecurity.conf"

    - name: Append lines to httpd.conf
      blockinfile:
        path: "{{ httpd_conf_dir }}/httpd.conf"
        block: |
          # Enabled modules
          LoadModule access_compat_module modules/mod_access_compat.so
          LoadModule access_compat_module modules/mod_log_rotate.so
          LoadModule security2_module modules/mod_security2.so
          LoadModule unique_id_module modules/mod_unique_id.so
          LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
          LoadModule ssl_module modules/mod_ssl.so
          LoadModule proxy_module modules/mod_proxy.so
          LoadModule proxy_http_module modules/mod_proxy_http.so
          LoadModule proxy_http2_module modules/mod_proxy_http2.so

          # Included conf
          Include conf/extra/modsecurity.conf
          Include conf/extra/crs-setup.conf
          Include conf/extra/rules/*.conf
          # Include conf/extra/httpd-ssl.conf
          Include conf/sites-enabled/*.conf

          # Enhancements
          # ServerName 127.0.0.1

          <Location "/console">
          Deny from  all
          </Location>
          
          # Disable TRACE HTTP method to enhance security
          TraceEnable Off
          
          # Set the server timeout to 150 seconds for client connections
          Timeout 150
          
          # Disable ETags for files to improve caching efficiency
          FileETag None
          
          # Turn off server signature (server version information) in response headers
          ServerSignature Off
          
          # Set the server tokens to 'Prod' to minimize the amount of information
          # revealed about the server software in response headers
          ServerTokens Prod
          
          # Enable HTTP Strict Transport Security (HSTS) for secure connections
          # This header tells browsers to only use HTTPS for the specified duration
          # and includes subdomains and preloading for added security
          Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
          
          # Modify Set-Cookie headers to enhance security:
          # - HttpOnly: Ensure cookies are only accessible via HTTP, not JavaScript
          # - Secure: Send cookies only over HTTPS connections
          # - SameSite=Strict: Strict enforcement of same-site cookie policy
          Header edit Set-Cookie ^(.*)$ $1;HttpOnly;Secure;SameSite=Strict
          
          # Set the X-Content-Type-Options header to nosniff
          # This prevents browsers from interpreting files as a different MIME type
          Header set X-Content-Type-Options nosniff

          # Open Ports
          Listen 443
          
          SSLCipherSuite ALL:!ECDHE-RSA-AES256-SHA:!DHE-RSA-AES256-SHA:!DHE-RSA-CAMELLIA256-SHA:!ECDHE-RSA-AES128-SHA:!DHE-RSA-AES128-SHA:!DHE-RSA-CAMELLIA128-SHA:!AES256-SHA:!CAMELLIA256-SHA:!AES128-SHA:!CAMELLIA128-SHA:!ECDHE-RSA-AES256-SHA384:!DHE-RSA-AES256-SHA256:!ECDHE-RSA-CAMELLIA256-SHA384:!DHE-RSA-CAMELLIA256-SHA256:!ECDHE-RSA-AES128-SHA256:!DHE-RSA-AES128-SHA256:!ECDHE-RSA-CAMELLIA128-SHA256:!DHE-RSA-CAMELLIA128-SHA256:!AES256-GCM-SHA384:!AES256-CCM8:!AES256-CCM:!ARIA256-GCM-SHA384:!AES128-GCM-SHA256:!AES128-CCM8:!AES128-CCM:!ARIA128-GCM-SHA256:!AES256-SHA256:!CAMELLIA256-SHA256:!AES128-SHA256:!CAMELLIA128-SHA256 
          SSLProxyCipherSuite ALL:!ECDHE-RSA-AES256-SHA:!DHE-RSA-AES256-SHA:!DHE-RSA-CAMELLIA256-SHA:!ECDHE-RSA-AES128-SHA:!DHE-RSA-AES128-SHA:!DHE-RSA-CAMELLIA128-SHA:!AES256-SHA:!CAMELLIA256-SHA:!AES128-SHA:!CAMELLIA128-SHA:!ECDHE-RSA-AES256-SHA384:!DHE-RSA-AES256-SHA256:!ECDHE-RSA-CAMELLIA256-SHA384:!DHE-RSA-CAMELLIA256-SHA256:!ECDHE-RSA-AES128-SHA256:!DHE-RSA-AES128-SHA256:!ECDHE-RSA-CAMELLIA128-SHA256:!DHE-RSA-CAMELLIA128-SHA256:!AES256-GCM-SHA384:!AES256-CCM8:!AES256-CCM:!ARIA256-GCM-SHA384:!AES128-GCM-SHA256:!AES128-CCM8:!AES128-CCM:!ARIA128-GCM-SHA256:!AES256-SHA256:!CAMELLIA256-SHA256:!AES128-SHA256:!CAMELLIA128-SHA256 
          
          # SSLCipherSuite HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!SRP:!CAMELLIA:!ARIA
          # SSLProxyCipherSuite HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK:!SRP:!CAMELLIA:!ARIA

          #   User agents such as web browsers are not configured for the user's
          #   own preference of either security or performance, therefore this
          #   must be the prerogative of the web server administrator who manages
          #   cpu load versus confidentiality, so enforce the server's cipher order.
          SSLHonorCipherOrder on

          SSLRandomSeed startup builtin
          SSLRandomSeed connect builtin

          #   SSL Protocol support:
          #   List the protocol versions which clients are allowed to connect with.
          #   Disable SSLv3 by default (cf. RFC 7525 3.1.1).  TLSv1 (1.0) should be
          #   disabled as quickly as practical.  By the end of 2016, only the TLSv1.2
          #   protocol or later should remain in use.
          SSLProtocol -all +TLSv1.2 +TLSv1.3
          SSLProxyProtocol -all +TLSv1.2 +TLSv1.3

          #   Inter-Process Session Cache:
          #   Configure the SSL Session Cache: First the mechanism 
          #   to use and second the expiring timeout (in seconds).
          SSLSessionCache        "shmcb:${SRVROOT}/logs/ssl_scache(512000)"
          SSLSessionCacheTimeout  300

          # Disable the preservation of the original host header when proxying requests
          # Apache will use its own hostname instead of passing the client's hostname to the proxied server
          ProxyPreserveHost Off
          
          # Disable SSL certificate verification for the proxied requests
          # Acceptable for internal network configurations but not be secure for public-facing services
          SSLProxyVerify none
          
          # Disable checking the peer certificate name for SSL/TLS connections
          # Acceptable for internal network configurations but not be secure for public-facing service
          SSLProxyCheckPeerName Off
          
          # Disable proxy request handling
          ProxyRequests Off


    - name: Update SecRuleEngine in modsecurity.conf
      lineinfile:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^SecRuleEngine\s'
        line: "SecRuleEngine On"

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^(SecTmpDir\s+)/tmp/$'
        replace: '\1tmp/'

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^(SecDataDir\s+)/tmp/$'
        replace: '\1tmp/'

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^#(SecUploadDir\s+)/opt/modsecurity/var/upload/'
        replace: '\1tmp/upload/'

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^#(SecDebugLog\s+)/opt/modsecurity/var/log/debug.log'
        replace: '\1logs/modsec_debug.log'

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^(SecAuditLog\s+)/var/log/modsec_audit.log'
        replace: '\1logs/modsec_audit.log'

    # - name: Update SSLCipherSuite in httpd-ssl.conf
    #   replace:
    #     path: "{{ httpd_conf_dir }}/extra/httpd-ssl.conf"
    #     regexp: '^(SSLCipherSuite\s+)HIGH:MEDIUM:!MD5:!RC4:!3DES'
    #     replace: '\1HIGH:!MEDIUM:!MD5:!RC4:!3DES'

    # - name: Update SSLProxyCipherSuite in httpd-ssl.conf
    #   replace:
    #     path: "{{ httpd_conf_dir }}/extra/httpd-ssl.conf"
    #     regexp: '^(SSLProxyCipherSuite\s+)HIGH:MEDIUM:!MD5:!RC4:!3DES'
    #     replace: '\1HIGH:!MEDIUM:!MD5:!RC4:!3DES'

    # - name: Update SSLProtocol in httpd-ssl.conf
    #   replace:
    #     path: "{{ httpd_conf_dir }}/extra/httpd-ssl.conf"
    #     regexp: '^(SSLProtocol\s+)all -SSLv3'
    #     replace: '\1-all +TLSv1.2 +TLSv1.3'

    # - name: Update SSLProxyProtocol in httpd-ssl.conf
    #   replace:
    #     path: "{{ httpd_conf_dir }}/extra/httpd-ssl.conf"
    #     regexp: '^(SSLProxyProtocol\s+)all -SSLv3'
    #     replace: '\1-all +TLSv1.2 +TLSv1.3'

    # - name: Generate SSL certificate and key for example.com defined in httpd-ssl.conf
    #   command: >
    #     openssl req -x509 -newkey rsa:4096 -nodes
    #     -subj "/CN=localhost"
    #     -addext "subjectAltName = DNS:example.com,DNS:www.example.com"
    #     -keyout "{{ httpd_conf_dir }}/server.key"
    #     -out "{{ httpd_conf_dir }}/server.crt"

    - name: Create dummy-site.com.conf
      copy:
        content: |
          # This is a sample conf file. Use it as a template and adapt it to your use case.
          # You can disable this conf file be renaming it to dummy-site.com.conf.disabled
          # The httpd server will only read conf files with the extension .conf
          
          # _default will match all requests which does not specify a FQDN
          <VirtualHost _default_:443>
          
          # VirtualHost can also be defined as follows:
          # <VirtualHost 192.168.0.1:443>
          # or as,
          # <VirtualHost dummy-site.com:443>
          
          # We are defining SRVNAME with our desired FQDN
          # If we have to change the FQDN we only have to change it here
          Define SRVNAME "dummy-site.com"
          
          # One can also use IP address instead of FQDN for ServerName and ServerAlias
          ServerName "${SRVNAME}"
          ServerAlias "www.${SRVNAME} www.api-${SRVNAME}"
          ServerAdmin "admin@${SRVNAME}"
          ErrorLog "logs/${SRVNAME}-error.log"
          TransferLog "logs/${SRVNAME}-access.log"
          
          # Enable/Disable SSL for this virtual host.
          SSLEngine on
          
          # SSL Certificate & Key 
          SSLCertificateFile "${SRVROOT}/conf/certs/${SRVNAME}/server.crt"
          SSLCertificateKeyFile "${SRVROOT}/conf/certs/${SRVNAME}/server.key"
          
          # Proxying via http ip/FQDN:port
          ProxyPass / http://localhost:7001/
          ProxyPassReverse / http://localhost:7001/
          
          # Proxying via https using FQDN
          # SSLProxyEngine on
          # ProxyPass / https://localhost:7002/
          # ProxyPassReverse / https://localhost:7002/
          
          # If you want to proxy a sub-path to a different backend other than what you have defined for the root path (/),
          # do the following
          # In the following directive, the declared ServerName and ServerAlias holds true
          # <Location "/ecsservice">
          #     # SSL Certificate for /ecsservice
          #     SSLEngine on
          #     SSLCertificateFile /path/to/api_certificate.crt
          #     SSLCertificateKeyFile /path/to/api_private_key.key
          
          #     ProxyPass http://localhost:3001/
          #     ProxyPassReverse http://localhost:3001/
          # </Location>
          </VirtualHost>

        dest: "{{ httpd_conf_dir }}/sites-enabled/dummy-site.com.conf"

    - name: Create directory
      file:
        path: "{{ httpd_conf_dir }}/certs/dummy-site.com"
        state: directory
        mode: '0755'

    - name: Generate SSL certificate and key
      command: >
        openssl req -x509 -newkey rsa:4096 -nodes
        -subj "/CN=dummy-site"
        -addext "subjectAltName = DNS:www.dummy-site.com"
        -keyout "{{ httpd_conf_dir }}/certs/dummy-site.com/server.key"
        -out "{{ httpd_conf_dir }}/certs/dummy-site.com/server.crt"

    - name: Get current date
      set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y-%m-%d') }}"
    - name: Create Archive
      archive:
        path: "{{ httpd_extract_dest }}"
        dest: "./tmp/httpd_{{current_date}}.zip"
        format: zip

