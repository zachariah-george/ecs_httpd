---
- name: Build apache httpd archive integrated with mod_security and owasp coreruleset
  hosts: localhost
  gather_facts: false
  vars_files: vars.yml
  environment:
    LC_ALL: "en_US.UTF-8"
    LANG: "en_US.UTF-8"
  tasks:
    - name: Install required packages
      become: true
      apt:
        name:
          - curl
          - unzip
          - zip
          - openssl
        state: present


    - name: Create destination directories if not exist
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ httpd_download_dest | dirname }}"
        - "{{ httpd_extract_dest }}"
        - "{{ mod_security_extract_dest }}"
        - "{{ crs_extract_dest }}"
        - "{{ openssl_extract_dest }}"

    - name: Download Apache HTTP Server
      shell: "curl -LJo {{ httpd_download_dest }} {{ httpd_download_url }}"

    - name: Extract Apache HTTP Server
      command: "unzip -o {{ httpd_download_dest }} -d {{ httpd_extract_dest }}"

    - name: Download mod_security module
      shell: "curl -LJo {{ mod_security_download_dest }} {{ mod_security_download_url }}"

    - name: Extract mod_security module
      command: "unzip -o {{ mod_security_download_dest }} -d {{ mod_security_extract_dest }}"

    - name: Download mod_log_rotate module
      shell: "curl -LJo {{ mod_log_rotate_download_dest }} {{ mod_log_rotate_download_url }}"

    - name: Extract mod_log_rotate module
      command: "unzip -o {{ mod_log_rotate_download_dest }} -d {{ mod_log_rotate_extract_dest }}"

    - name: Download coreruleset archive
      shell: "curl -LJo {{ crs_download_dest }} {{ crs_download_url }}"

    - name: Extract coreruleset archive
      command: "unzip -o {{ crs_download_dest }} -d {{ crs_extract_dest }}"

    - name: Download openssl archive
      shell: "curl -LJo {{ openssl_download_dest }} {{ openssl_download_url }}"

    - name: Extract openssl archive
      command: "unzip -o {{ openssl_download_dest }} -d {{ openssl_extract_dest }}"

    - name: Find ApacheXX path
      find:
        paths: ./tmp/
        patterns: ABOUT_APACHE.txt
        file_type: file
        recurse: yes
      register: found_files

    - name: Find Apache directory
      find:
        paths: ./tmp/httpd/
        patterns: "Apache*"
        file_type: directory
      register: apache_directory


    - name: Display Apache directory path
      debug:
        var: apache_directory.files[0].path
    - name: Set the target directory
      set_fact:
        httpd_directory: "{{ found_files.files[0].path | dirname }}"
      when: found_files.files | length > 0
      
    - name: Read the content of changes.txt
      ansible.builtin.slurp:
        src: "{{ httpd_directory }}/CHANGES.txt"
      register: file_content

    - name: Extract URL
      set_fact:
        url: "{{ file_content['content'] | b64decode | regex_search('See :\\s+(https?://\\S+)', '\\1') }}"

    - name: Display extracted URL
      debug:
        var: url

    - name: Copy mod_security2.so to Apache modules directory
      command: "cp {{ mod_security_extract_dest }}/mod_security-{{ mod_security_version }}/mod_security2.so {{ httpd_directory }}/modules/"

    - name: Copy yajl.dll to Apache bin directory
      command: "cp {{ mod_security_extract_dest }}/mod_security-{{ mod_security_version }}/yajl.dll {{ httpd_directory }}/bin/"

    - name: Copy mod_log_rotate.so to Apache modules directory
      command: "cp {{ mod_log_rotate_extract_dest }}/mod_log_rotate.so {{ httpd_directory }}/modules/"

    - name: Copy openssl bin to Apache bin directory
      command: "cp -r {{ openssl_extract_dest }}/openssl/bin/. {{ httpd_directory }}/bin/"

    - name: Download unicode.mapping file
      shell: "curl -o {{ unicode_mapping_dest }} {{ unicode_mapping_url }}"

    - name: Copy crs-setup.conf.example to crs-setup.conf
      copy:
        src: "{{ crs_setup_conf_example }}"
        dest: "{{ crs_setup_conf_dest }}"

    - name: Copy coreruleset rules
      copy:
        src: "{{ crs_rules_dir }}"
        dest: "{{ httpd_rules_dest }}"
        
    - name: Find .conf files that contain DRUPAL, WORDPRESS or CPANEL in the filename
      find:
        paths: "{{ httpd_rules_dest }}"
        patterns: '*DRUPAL*.conf,*WORDPRESS*.conf,*CPANEL*.conf'
      register: files_to_rename

    - name: Rename .conf files to .conf.disabled
      command: mv {{ item.path }} {{ item.path }}.disabled
      with_items: "{{ files_to_rename.files }}"

    - name: Create certs directory
      file:
        path: "{{ httpd_certs_dir }}"
        state: directory

    - name: Create sites-enabled directory
      file:
        path: "{{ httpd_sites_enabled_dir }}"
        state: directory

    - name: Copy modsecurity.conf-recommended to modsecurity.conf
      copy:
        src: "{{ mod_security_extract_dest }}/mod_security-{{ mod_security_version }}/mod_security/modsecurity.conf-recommended"
        dest: "{{ httpd_conf_dir }}/extra/modsecurity.conf"

    - name: Create custom.conf file
      copy:
        content: ./custom.conf'
        dest: "{{ httpd_conf_dir }}/custom.conf"
    
    - name: Include custom.conf in httpd.conf
      lineinfile:
        path: "{{ httpd_conf_dir }}/httpd.conf"
        line: "# Include additional configurations from custom.conf"
        insertafter: BOF
    
    - name: Include custom.conf in httpd.conf
      lineinfile:
        path: "{{ httpd_conf_dir }}/httpd.conf"
        line: "Include conf/extra.conf"
        insertafter: "# Include additional configurations from custom.conf"

    - name: Update SecRuleEngine in modsecurity.conf
      lineinfile:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^SecRuleEngine\s'
        line: "SecRuleEngine On"

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^(SecTmpDir\s+)/tmp/$'
        replace: '\1tmp/'

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^(SecDataDir\s+)/tmp/$'
        replace: '\1tmp/'

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^#(SecUploadDir\s+)/opt/modsecurity/var/upload/'
        replace: '\1tmp/upload/'

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^#(SecDebugLog\s+)/opt/modsecurity/var/log/debug.log'
        replace: '\1logs/modsec_debug.log'

    - name: Update paths in modsecurity.conf
      replace:
        path: "{{ httpd_conf_dir }}/extra/modsecurity.conf"
        regexp: '^(SecAuditLog\s+)/var/log/modsec_audit.log'
        replace: '\1logs/modsec_audit.log'

    # - name: Update SSLCipherSuite in httpd-ssl.conf
    #   replace:
    #     path: "{{ httpd_conf_dir }}/extra/httpd-ssl.conf"
    #     regexp: '^(SSLCipherSuite\s+)HIGH:MEDIUM:!MD5:!RC4:!3DES'
    #     replace: '\1HIGH:!MEDIUM:!MD5:!RC4:!3DES'

    # - name: Update SSLProxyCipherSuite in httpd-ssl.conf
    #   replace:
    #     path: "{{ httpd_conf_dir }}/extra/httpd-ssl.conf"
    #     regexp: '^(SSLProxyCipherSuite\s+)HIGH:MEDIUM:!MD5:!RC4:!3DES'
    #     replace: '\1HIGH:!MEDIUM:!MD5:!RC4:!3DES'

    # - name: Update SSLProtocol in httpd-ssl.conf
    #   replace:
    #     path: "{{ httpd_conf_dir }}/extra/httpd-ssl.conf"
    #     regexp: '^(SSLProtocol\s+)all -SSLv3'
    #     replace: '\1-all +TLSv1.2 +TLSv1.3'

    # - name: Update SSLProxyProtocol in httpd-ssl.conf
    #   replace:
    #     path: "{{ httpd_conf_dir }}/extra/httpd-ssl.conf"
    #     regexp: '^(SSLProxyProtocol\s+)all -SSLv3'
    #     replace: '\1-all +TLSv1.2 +TLSv1.3'

    # - name: Generate SSL certificate and key for example.com defined in httpd-ssl.conf
    #   command: >
    #     openssl req -x509 -newkey rsa:4096 -nodes
    #     -subj "/CN=localhost"
    #     -addext "subjectAltName = DNS:example.com,DNS:www.example.com"
    #     -keyout "{{ httpd_conf_dir }}/server.key"
    #     -out "{{ httpd_conf_dir }}/server.crt"

    - name: Create dummy-site.com.conf
      copy:
        content: |
          # This is a sample conf file. Use it as a template and adapt it to your use case.
          # You can disable this conf file be renaming it to dummy-site.com.conf.disabled
          # The httpd server will only read conf files with the extension .conf
          
          # _default will match all requests which does not specify a FQDN
          <VirtualHost _default_:443>
          
          # VirtualHost can also be defined as follows:
          # <VirtualHost 192.168.0.1:443>
          # or as,
          # <VirtualHost dummy-site.com:443>
          
          # We are defining SRVNAME with our desired FQDN
          # If we have to change the FQDN we only have to change it here
          Define SRVNAME "dummy-site.com"
          
          # One can also use IP address instead of FQDN for ServerName and ServerAlias
          ServerName "${SRVNAME}"
          ServerAlias "www.${SRVNAME} www.api-${SRVNAME}"
          ServerAdmin "admin@${SRVNAME}"
          ErrorLog "logs/${SRVNAME}-error.log"
          TransferLog "logs/${SRVNAME}-access.log"
          
          # Enable/Disable SSL for this virtual host.
          SSLEngine on
          
          # SSL Certificate & Key 
          SSLCertificateFile "${SRVROOT}/conf/certs/${SRVNAME}/server.crt"
          SSLCertificateKeyFile "${SRVROOT}/conf/certs/${SRVNAME}/server.key"
          
          # Proxying via http ip/FQDN:port
          ProxyPass / http://localhost:7001/
          ProxyPassReverse / http://localhost:7001/
          
          # Proxying via https using FQDN
          # SSLProxyEngine on
          # ProxyPass / https://localhost:7002/
          # ProxyPassReverse / https://localhost:7002/
          
          # If you want to proxy a sub-path to a different backend other than what you have defined for the root path (/),
          # do the following
          # In the following directive, the declared ServerName and ServerAlias holds true
          # <Location "/ecsservice">
          #     # SSL Certificate for /ecsservice
          #     SSLEngine on
          #     SSLCertificateFile /path/to/api_certificate.crt
          #     SSLCertificateKeyFile /path/to/api_private_key.key
          
          #     ProxyPass http://localhost:3001/
          #     ProxyPassReverse http://localhost:3001/
          # </Location>
          </VirtualHost>

        dest: "{{ httpd_conf_dir }}/sites-enabled/dummy-site.com.conf"

    - name: Create directory
      file:
        path: "{{ httpd_conf_dir }}/certs/dummy-site.com"
        state: directory
        mode: '0755'

    - name: Generate SSL certificate and key
      command: >
        openssl req -x509 -newkey rsa:4096 -nodes
        -subj "/CN=dummy-site"
        -addext "subjectAltName = DNS:www.dummy-site.com"
        -keyout "{{ httpd_conf_dir }}/certs/dummy-site.com/server.key"
        -out "{{ httpd_conf_dir }}/certs/dummy-site.com/server.crt"

    - name: Get current date
      set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y-%m-%d') }}"
    - name: Create Archive
      archive:
        path: "{{ httpd_extract_dest }}"
        dest: "./tmp/httpd_{{current_date}}.zip"
        format: zip

